// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplicationPlateforme.Data;

namespace WebApplicationPlateforme.Migrations.Finance
{
    [DbContext(typeof(FinanceContext))]
    [Migration("20200524132827_MigrationFinanceRevenus")]
    partial class MigrationFinanceRevenus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.LesServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("date")
                        .HasColumnType("text");

                    b.Property<int>("idRevenus")
                        .HasColumnType("integer");

                    b.Property<string>("nomServices")
                        .HasColumnType("text");

                    b.Property<string>("paye")
                        .HasColumnType("text");

                    b.Property<string>("prixService")
                        .HasColumnType("text");

                    b.Property<string>("reste")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("idRevenus");

                    b.ToTable("lesServices");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.agenceImmob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("adresse")
                        .HasColumnType("text");

                    b.Property<string>("dateenreg")
                        .HasColumnType("text");

                    b.Property<string>("fax")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.Property<string>("nomResponsable")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("tel")
                        .HasColumnType("text");

                    b.Property<string>("ville")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("agenceImmobs");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.contratLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("date")
                        .HasColumnType("text");

                    b.Property<int>("idlocation")
                        .HasColumnType("integer");

                    b.Property<int?>("locationUniteId")
                        .HasColumnType("integer");

                    b.Property<string>("path")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("locationUniteId");

                    b.ToTable("contratLocations");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.depotRevenus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("depotRevenus");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.dotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AgenceImmobId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorName")
                        .HasColumnType("text");

                    b.Property<string>("adresse")
                        .HasColumnType("text");

                    b.Property<string>("attribue4")
                        .HasColumnType("text");

                    b.Property<int>("attribut1")
                        .HasColumnType("integer");

                    b.Property<string>("attribut2")
                        .HasColumnType("text");

                    b.Property<string>("attribut3")
                        .HasColumnType("text");

                    b.Property<string>("comptable")
                        .HasColumnType("text");

                    b.Property<string>("compteurElec")
                        .HasColumnType("text");

                    b.Property<string>("date")
                        .HasColumnType("text");

                    b.Property<string>("dateenreg")
                        .HasColumnType("text");

                    b.Property<string>("etat")
                        .HasColumnType("text");

                    b.Property<int>("idAgence")
                        .HasColumnType("integer");

                    b.Property<string>("idUserCreator")
                        .HasColumnType("text");

                    b.Property<string>("nbunite")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.Property<string>("numCompteur")
                        .HasColumnType("text");

                    b.Property<string>("officeImmobiler")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgenceImmobId");

                    b.HasIndex("idUserCreator");

                    b.ToTable("dotations");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.etatDotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("etatDotations");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.etatUnite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("etatUnites");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.locataire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatorName")
                        .HasColumnType("text");

                    b.Property<string>("adresse")
                        .HasColumnType("text");

                    b.Property<string>("attribue4")
                        .HasColumnType("text");

                    b.Property<int>("attribut1")
                        .HasColumnType("integer");

                    b.Property<string>("attribut2")
                        .HasColumnType("text");

                    b.Property<string>("attribut3")
                        .HasColumnType("text");

                    b.Property<string>("cin")
                        .HasColumnType("text");

                    b.Property<string>("dateenreg")
                        .HasColumnType("text");

                    b.Property<string>("idUserCreator")
                        .HasColumnType("text");

                    b.Property<string>("nationnalite")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.Property<string>("profession")
                        .HasColumnType("text");

                    b.Property<string>("tel")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("idUserCreator");

                    b.ToTable("locataires");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.locationUnite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatorName")
                        .HasColumnType("text");

                    b.Property<string>("datedebutcontrat")
                        .HasColumnType("text");

                    b.Property<string>("dateenreg")
                        .HasColumnType("text");

                    b.Property<string>("delaicontrat")
                        .HasColumnType("text");

                    b.Property<string>("idUserCreator")
                        .HasColumnType("text");

                    b.Property<int>("iddotation")
                        .HasColumnType("integer");

                    b.Property<int>("idlocataire")
                        .HasColumnType("integer");

                    b.Property<int>("idunite")
                        .HasColumnType("integer");

                    b.Property<string>("locataireName")
                        .HasColumnType("text");

                    b.Property<string>("moisdelocation")
                        .HasColumnType("text");

                    b.Property<string>("nomdotation")
                        .HasColumnType("text");

                    b.Property<string>("nomunite")
                        .HasColumnType("text");

                    b.Property<string>("numcontrat")
                        .HasColumnType("text");

                    b.Property<string>("prixlocationmois")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("idUserCreator");

                    b.HasIndex("iddotation");

                    b.HasIndex("idlocataire");

                    b.HasIndex("idunite");

                    b.ToTable("locationUnites");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.piecesjointesLocataire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("date")
                        .HasColumnType("text");

                    b.Property<int>("idlocataire")
                        .HasColumnType("integer");

                    b.Property<string>("nomLocataire")
                        .HasColumnType("text");

                    b.Property<string>("path")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("idlocataire");

                    b.ToTable("piecesjointesLocataires");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.piecesjointesRevenus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("date")
                        .HasColumnType("text");

                    b.Property<int>("idrevenus")
                        .HasColumnType("integer");

                    b.Property<string>("path")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("idrevenus");

                    b.ToTable("PiecesjointesRevenus");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.revenus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatorName")
                        .HasColumnType("text");

                    b.Property<string>("attribue4")
                        .HasColumnType("text");

                    b.Property<int>("attribut1")
                        .HasColumnType("integer");

                    b.Property<string>("attribut2")
                        .HasColumnType("text");

                    b.Property<string>("attribut3")
                        .HasColumnType("text");

                    b.Property<string>("dateTemps")
                        .HasColumnType("text");

                    b.Property<string>("dateenreg")
                        .HasColumnType("text");

                    b.Property<string>("deposant")
                        .HasColumnType("text");

                    b.Property<int>("idLocataire")
                        .HasColumnType("integer");

                    b.Property<string>("idUserCreator")
                        .HasColumnType("text");

                    b.Property<int>("iddotation")
                        .HasColumnType("integer");

                    b.Property<int>("idlocation")
                        .HasColumnType("integer");

                    b.Property<int>("idunite")
                        .HasColumnType("integer");

                    b.Property<string>("infoDepot")
                        .HasColumnType("text");

                    b.Property<string>("mois")
                        .HasColumnType("text");

                    b.Property<string>("nomDotation")
                        .HasColumnType("text");

                    b.Property<string>("nomLocataire")
                        .HasColumnType("text");

                    b.Property<string>("numRevenusUnite")
                        .HasColumnType("text");

                    b.Property<string>("prixLocation")
                        .HasColumnType("text");

                    b.Property<string>("prixServices")
                        .HasColumnType("text");

                    b.Property<string>("prixTot")
                        .HasColumnType("text");

                    b.Property<string>("prixTotale")
                        .HasColumnType("text");

                    b.Property<string>("prixTotaleLocation")
                        .HasColumnType("text");

                    b.Property<string>("restePrixService")
                        .HasColumnType("text");

                    b.Property<string>("restePrixTotale")
                        .HasColumnType("text");

                    b.Property<string>("restePrixTotaleLocation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("idUserCreator");

                    b.HasIndex("idlocation");

                    b.ToTable("revenus");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.servicesRevenus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.Property<string>("prix")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("servicesRevenus");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.typeDotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("typeDotations");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.typeUnite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("typeUnites");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.unite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatorName")
                        .HasColumnType("text");

                    b.Property<string>("attribue4")
                        .HasColumnType("text");

                    b.Property<int>("attribut1")
                        .HasColumnType("integer");

                    b.Property<string>("attribut2")
                        .HasColumnType("text");

                    b.Property<string>("attribut3")
                        .HasColumnType("text");

                    b.Property<string>("bureau")
                        .HasColumnType("text");

                    b.Property<string>("chambre")
                        .HasColumnType("text");

                    b.Property<string>("compteurElc")
                        .HasColumnType("text");

                    b.Property<string>("compteureau")
                        .HasColumnType("text");

                    b.Property<string>("cuisine")
                        .HasColumnType("text");

                    b.Property<string>("dateenreg")
                        .HasColumnType("text");

                    b.Property<string>("dotationName")
                        .HasColumnType("text");

                    b.Property<string>("etat")
                        .HasColumnType("text");

                    b.Property<int>("idDotation")
                        .HasColumnType("integer");

                    b.Property<string>("idUserCreator")
                        .HasColumnType("text");

                    b.Property<string>("numRevenus")
                        .HasColumnType("text");

                    b.Property<string>("prix")
                        .HasColumnType("text");

                    b.Property<string>("salon")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<string>("wc")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("idDotation");

                    b.HasIndex("idUserCreator");

                    b.ToTable("unites");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Global.Administration", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<string>("NomDirecteur")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Administration");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Global.Departement", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IdAdministration")
                        .HasColumnType("integer");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<string>("NomAdministration")
                        .HasColumnType("text");

                    b.Property<string>("NomDirecteur")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdAdministration");

                    b.ToTable("Departement");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.User.Privileges", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Rapport")
                        .HasColumnType("integer");

                    b.Property<int>("addTask")
                        .HasColumnType("integer");

                    b.Property<int>("appel")
                        .HasColumnType("integer");

                    b.Property<int>("commAd")
                        .HasColumnType("integer");

                    b.Property<int>("performance")
                        .HasColumnType("integer");

                    b.Property<int>("salaire")
                        .HasColumnType("integer");

                    b.Property<int>("serviceEmployee")
                        .HasColumnType("integer");

                    b.Property<int>("settings")
                        .HasColumnType("integer");

                    b.Property<string>("userid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("userid");

                    b.ToTable("privileges");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.User.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("AutreIndemnite")
                        .HasColumnType("text");

                    b.Property<string>("Classement")
                        .HasColumnType("text");

                    b.Property<string>("DateNaissance")
                        .HasColumnType("text");

                    b.Property<string>("DateQualification")
                        .HasColumnType("text");

                    b.Property<string>("Degre")
                        .HasColumnType("text");

                    b.Property<string>("Emploi")
                        .HasColumnType("text");

                    b.Property<string>("FaculteEcole")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("FullNameEnglish")
                        .HasColumnType("text");

                    b.Property<string>("HeureArrive")
                        .HasColumnType("text");

                    b.Property<string>("HeureDepart")
                        .HasColumnType("text");

                    b.Property<int?>("IdAdministration")
                        .HasColumnType("integer");

                    b.Property<int?>("IdDepartement")
                        .HasColumnType("integer");

                    b.Property<string>("Indemnite")
                        .HasColumnType("text");

                    b.Property<string>("LieuNaissance")
                        .HasColumnType("text");

                    b.Property<string>("Mention")
                        .HasColumnType("text");

                    b.Property<string>("Nationalite")
                        .HasColumnType("text");

                    b.Property<string>("NomAdministration")
                        .HasColumnType("text");

                    b.Property<string>("NomDepartement")
                        .HasColumnType("text");

                    b.Property<string>("Num")
                        .HasColumnType("text");

                    b.Property<string>("Passeport")
                        .HasColumnType("text");

                    b.Property<string>("Paysetude")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("Rang")
                        .HasColumnType("text");

                    b.Property<string>("RegistreCivil")
                        .HasColumnType("text");

                    b.Property<string>("Religion")
                        .HasColumnType("text");

                    b.Property<string>("Salaire")
                        .HasColumnType("text");

                    b.Property<string>("Sexe")
                        .HasColumnType("text");

                    b.Property<string>("Specialite")
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .HasColumnType("text");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("TypeEmploi")
                        .HasColumnType("text");

                    b.Property<string>("TypeQualification")
                        .HasColumnType("text");

                    b.Property<string>("TypeSang")
                        .HasColumnType("text");

                    b.Property<string>("Unite")
                        .HasColumnType("text");

                    b.Property<string>("adresse")
                        .HasColumnType("text");

                    b.HasIndex("IdAdministration");

                    b.HasIndex("IdDepartement");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.LesServices", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.Dotations.revenus", "revenus")
                        .WithMany()
                        .HasForeignKey("idRevenus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.contratLocation", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.Dotations.locationUnite", "locationUnite")
                        .WithMany()
                        .HasForeignKey("locationUniteId");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.dotation", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.Dotations.agenceImmob", "AgenceImmob")
                        .WithMany()
                        .HasForeignKey("AgenceImmobId");

                    b.HasOne("WebApplicationPlateforme.Model.User.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("idUserCreator");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.locataire", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.User.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("idUserCreator");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.locationUnite", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.User.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("idUserCreator");

                    b.HasOne("WebApplicationPlateforme.Model.Dotations.dotation", "dotation")
                        .WithMany()
                        .HasForeignKey("iddotation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationPlateforme.Model.Dotations.locataire", "locataire")
                        .WithMany()
                        .HasForeignKey("idlocataire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationPlateforme.Model.Dotations.unite", "unite")
                        .WithMany()
                        .HasForeignKey("idunite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.piecesjointesLocataire", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.Dotations.locataire", "locataire")
                        .WithMany()
                        .HasForeignKey("idlocataire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.piecesjointesRevenus", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.Dotations.revenus", "revenus")
                        .WithMany()
                        .HasForeignKey("idrevenus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.revenus", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.User.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("idUserCreator");

                    b.HasOne("WebApplicationPlateforme.Model.Dotations.locationUnite", "locationUnite")
                        .WithMany()
                        .HasForeignKey("idlocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Dotations.unite", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.Dotations.dotation", "dotation")
                        .WithMany()
                        .HasForeignKey("idDotation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationPlateforme.Model.User.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("idUserCreator");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.Global.Departement", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.Global.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("IdAdministration")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.User.Privileges", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.User.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("userid");
                });

            modelBuilder.Entity("WebApplicationPlateforme.Model.User.ApplicationUser", b =>
                {
                    b.HasOne("WebApplicationPlateforme.Model.Global.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("IdAdministration");

                    b.HasOne("WebApplicationPlateforme.Model.Global.Departement", "Departement")
                        .WithMany()
                        .HasForeignKey("IdDepartement");
                });
#pragma warning restore 612, 618
        }
    }
}
